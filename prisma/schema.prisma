generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  RECRUITER
  INTERVIEWER
  VIEWER
}

enum InterviewKind {
  BEHAVIORAL
  TECH
}

enum AssessmentModel {
  DISC
  BIGFIVE
  MBTI
  CUSTOM
}

enum Industry {
  TECH
  EDUCATION
  FINANCE
  JURIDICAL
  LOGISTICS
  MANUFACTURING
  MEDIA
  REAL_ESTATE
  RETAIL
  HEALTH
  TOURISM
  CONSTRUCTION
  GOVERNMENT
  ENERGY
  NGO
  RESEARCH
  OTHER
}

enum ContractType {
  OTHER
}

enum WorkModel {
  REMOTE
  HYBRID
  PRESENTIAL
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String?
  image       String?
  kindeId     String?      @unique
  phoneNumber String?
  tenantId    String?
  tenant      Tenant?      @relation(fields: [tenantId], references: [id])
  memberships Membership[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Contact {
  id        String   @id @default(uuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  name      String
  email     String
  phone     String
  createdAt DateTime @default(now())
}

model Address {
  id       String @id @default(uuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  street   String
  number   String
}

model Tenant {
  id              String       @id @default(uuid())
  name            String
  slug            String?      @unique
  website         String?
  industry        Industry?
  about           String?
  longDescription String?
  logoUrl         String?
  onboardedAt     DateTime?
  onboardingStep  String?
  users           User[]
  memberships     Membership[]
  jobs            Job[]
  candidates      Candidate[]
  contacts        Contact[]
  addresses       Address[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  Interview        Interview[]
  AssessmentResult AssessmentResult[]
  FinalScore       FinalScore[]
  Invites          Invite[]
}

model Membership {
  id       String   @id @default(uuid())
  userId   String
  tenantId String
  role     Role
  scopes   String[] @default([])

  user   User   @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([userId, tenantId])
}

model Invite {
  id         String    @id @default(cuid())
  email      String
  role       Role
  tenantId   String
  tenant     Tenant    @relation(fields: [tenantId], references: [id])
  token      String?   @unique
  expiresAt  DateTime?
  acceptedAt DateTime?
}

model Job {
  id               String       @id @default(uuid())
  tenantId         String
  title            String
  subtitle         String? // opcional: "Full Stack Developer | Remote | R$10–15K"
  description      String // markdown ou rich text
  requirements     String? // markdown
  responsibilities String? // markdown
  benefits         String? // markdown ou JSON
  workModel        String? // "Remoto" | "Híbrido" | "Presencial"
  location         String? // "São Paulo, SP, Brasil"
  country          String? // "Brasil"
  city             String?
  contractType     String? // "CLT", "PJ", "Freelancer", etc.
  workSchedule     String? // "Integral", "Parcial", "Turno", etc.
  salaryRangeMin   Float?
  salaryRangeMax   Float?
  salaryCurrency   String?      @default("BRL")
  tags             JobTag[]     @relation("JobTags")
  skills           String[]     @default([])
  embedding        Bytes? // ou Unsupported("vector") se você habilitar pgvector
  tenant           Tenant           @relation(fields: [tenantId], references: [id])
  interviews       Interview[]
  applications     JobApplication[]
  publishedAt      DateTime? // data de publicação
  expirationDate   DateTime?
  isActive         Boolean          @default(true)
  applicationUrl   String?
  metadataJson     Json? // guarda JSON cru da importação externa
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  FinalScore       FinalScore[]
}

model Candidate {
  id               String             @id @default(uuid())
  tenantId         String
  name             String?
  email            String?
  linkedinUrl      String?
  resumeUrl        String?
  resumeJson       Json?
  embedding        Bytes?
  status           String             @default("applied")
  tenant           Tenant             @relation(fields: [tenantId], references: [id])
  interviews       Interview[]
  applications     JobApplication[]
  createdAt        DateTime           @default(now())
  AssessmentResult AssessmentResult[]
  FinalScore       FinalScore[]
}

model JobApplication {
  id          String    @id @default(uuid())
  jobId       String
  candidateId String
  message     String?
  status      String    @default("pending") // "pending", "reviewing", "accepted", "rejected"
  job         Job       @relation(fields: [jobId], references: [id])
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Interview {
  id            String        @id @default(uuid())
  tenantId      String
  jobId         String
  candidateId   String
  kind          InterviewKind
  status        String        @default("submitted")
  vapiSessionId String?
  transcriptUrl String?
  paralingJson  Json?
  nlpScoresJson Json?
  stageScore    Float?
  reportUrl     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  job           Job           @relation(fields: [jobId], references: [id])
  candidate     Candidate     @relation(fields: [candidateId], references: [id])
}

model AssessmentResult {
  id          String          @id @default(uuid())
  tenantId    String
  candidateId String
  model       AssessmentModel
  rawJson     Json
  normalized  Json
  fitScore    Float?
  createdAt   DateTime        @default(now())
  tenant      Tenant          @relation(fields: [tenantId], references: [id])
  candidate   Candidate       @relation(fields: [candidateId], references: [id])
}

model FinalScore {
  id             String    @id @default(uuid())
  tenantId       String
  jobId          String
  candidateId    String
  resumeScore    Float?
  discScore      Float?
  interviewScore Float?
  techScore      Float?
  overall        Float?
  detailsJson    Json?
  rubricVersion  String?
  createdAt      DateTime  @default(now())
  tenant         Tenant    @relation(fields: [tenantId], references: [id])
  job            Job       @relation(fields: [jobId], references: [id])
  candidate      Candidate @relation(fields: [candidateId], references: [id])
}

model Blacklist {
  id          String   @id @default(uuid())
  tenantId    String
  candidateId String
  reason      String?
  createdAt   DateTime @default(now())
}

model TalentPool {
  id          String   @id @default(uuid())
  tenantId    String
  candidateId String
  notes       String?
  tags        String[]
  createdAt   DateTime @default(now())
}

model JobTag {
  id        String   @id @default(uuid())
  tag       String   @unique
  jobs      Job[]    @relation("JobTags")
  createdAt DateTime @default(now())
}
